/*
Analyze the following segment of code. Indicate which are the possible outputs generated by the
program. Note that incorrect answers imply a penalty in the final score.
typedef struct cond_s {
pthread_mutex_t lock;
pthread_cond_t cond;
int count;
int flag;
} cond_t;
static void *TA (void *args) {
cond_t *cond_d = (cond_t *) args;
sleep (1);
while (1) {
pthread_mutex_lock (&cond_d->lock);
cond_d->count++;
printf ("%d ", cond_d->count);
if (cond_d->count >= 10) {
cond_d->flag = 1;
pthread_cond_signal (&cond_d->cond);
pthread_mutex_unlock (&cond_d->lock);
break;
}
pthread_mutex_unlock (&cond_d->lock);
}
pthread_exit(0);
}
static void *TB (void *args) {
cond_t *cond_d = (cond_t *) args;
pthread_mutex_lock (&cond_d->lock);
while (cond_d->flag == 0) {
pthread_cond_wait (&cond_d->cond, &cond_d->lock);
printf ("[%d]\n", cond_d->count);
}
pthread_mutex_unlock (&cond_d->lock);
pthread_exit(0);
}
int main () {
cond_t cond_d;
pthread_t tid1, tid2;
setbuf (stdout, 0);
pthread_mutex_init (&cond_d.lock, NULL);
pthread_cond_init (&cond_d.cond, NULL);
cond_d.count = 0;
cond_d.flag = 0;
pthread_create (&tid1, NULL, TA, (void *) &cond_d);
pthread_create (&tid2, NULL, TB, (void *) &cond_d);
pthread_join (tid1, NULL);
pthread_join (tid2, NULL);
pthread_exit(0);
}
Select one or more alternatives
1. 1 2 3 4 5 6 7 8 9 10 [10]
2. 1 2 3 4 5 6 7 8 9 10
3. [10] 1 2 3 4 5 6 7 8 9 10
4. 1 2 3 4 5 6 7 8 9
5. 1 2 3 4 5 6 7 8 9 [10]
6. 0 1 2 3 4 5 6 7 8 9 [10]
*/